import streamlit as st
import re
import PyPDF2
import docx
import json
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.enums import TA_LEFT

# Configuration de la page
st.set_page_config(
    page_title="Anonymiseur de CV - RGPD",
    page_icon="üîí",
    layout="wide"
)

# Fonction pour extraire le texte d'un PDF
def extract_text_from_pdf(pdf_file):
    pdf_reader = PyPDF2.PdfReader(BytesIO(pdf_file.read()))
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text

# Fonction pour extraire le texte d'un DOCX
def extract_text_from_docx(docx_file):
    doc = docx.Document(BytesIO(docx_file.read()))
    text = ""
    for paragraph in doc.paragraphs:
        text += paragraph.text + "\n"
    return text

# Fonction d'anonymisation RGPD renforc√©e
def anonymize_cv(text, custom_firstname="", custom_lastname=""):
    """
    Anonymise les donn√©es personnelles sensibles du CV selon le RGPD
    Permet √©galement de masquer manuellement un nom et pr√©nom sp√©cifique
    """
    anonymized = text
    
    # √âTAPE 1 : Masquer le nom et pr√©nom fournis manuellement (prioritaire)
    if custom_firstname.strip():
        # Masquer le pr√©nom exact (insensible √† la casse)
        anonymized = re.sub(
            rf'\b{re.escape(custom_firstname)}\b',
            '[PR√âNOM_MASQU√â]',
            anonymized,
            flags=re.IGNORECASE
        )
    
    if custom_lastname.strip():
        # Masquer le nom exact (insensible √† la casse)
        anonymized = re.sub(
            rf'\b{re.escape(custom_lastname)}\b',
            '[NOM_MASQU√â]',
            anonymized,
            flags=re.IGNORECASE
        )
    
    # √âTAPE 2 : Masquer automatiquement les autres noms/pr√©noms potentiels (patterns RGPD)
    # Masquer les noms et pr√©noms courants (patterns basiques)
    # Recherche de "Pr√©nom NOM" en d√©but de ligne ou apr√®s certains mots-cl√©s
    anonymized = re.sub(
        r'\b(M\.|Mme|Mlle|Monsieur|Madame|Mademoiselle)\s+([A-Z][a-z√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ß]+(\s+[A-Z][a-z√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ß]+)?)\s+([A-Z][A-Z√Ä√Ç√Ñ√â√à√ä√ã√è√é√î√ô√õ√ú√á\-]+)\b',
        r'\1 [PR√âNOM_MASQU√â] [NOM_MASQU√â]',
        anonymized
    )
    
    # Masquer les noms en majuscules suivis de pr√©noms
    anonymized = re.sub(
        r'\b([A-Z][A-Z√Ä√Ç√Ñ√â√à√ä√ã√è√é√î√ô√õ√ú√á\-]{2,})\s+([A-Z][a-z√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ß]+)\b',
        '[NOM_MASQU√â] [PR√âNOM_MASQU√â]',
        anonymized
    )
    
    # Masquer format "Pr√©nom Nom" en d√©but de document ou ligne
    anonymized = re.sub(
        r'^([A-Z][a-z√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ß]+)\s+([A-Z][a-z√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ß]+)',
        '[PR√âNOM_MASQU√â] [NOM_MASQU√â]',
        anonymized,
        flags=re.MULTILINE
    )
    
    # Masquer les emails
    anonymized = re.sub(
        r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', 
        '[EMAIL_MASQU√â]', 
        anonymized
    )
    
    # Masquer les num√©ros de t√©l√©phone fran√ßais et internationaux
    anonymized = re.sub(
        r'(\+33|0033|0)[1-9](\s?\d{2}){4}', 
        '[T√âL√âPHONE_MASQU√â]', 
        anonymized
    )
    anonymized = re.sub(
        r'\b\d{2}[\s\.\-]?\d{2}[\s\.\-]?\d{2}[\s\.\-]?\d{2}[\s\.\-]?\d{2}\b', 
        '[T√âL√âPHONE_MASQU√â]', 
        anonymized
    )
    
    # Masquer les adresses compl√®tes (pattern am√©lior√©)
    anonymized = re.sub(
        r'\d{1,5}\s+(bis|ter)?\s*(rue|avenue|boulevard|all√©e|impasse|place|chemin|route|cours|quai)\s+[\w\s\'\-]+,?\s*\d{5}?\s*[\w\s\-]*',
        '[ADRESSE_MASQU√âE]',
        anonymized,
        flags=re.IGNORECASE
    )
    
    # Masquer les adresses sans num√©ro
    anonymized = re.sub(
        r'\b(rue|avenue|boulevard|all√©e|impasse|place|chemin|route|cours|quai)\s+[\w\s\'\-]{3,40}\s*,?\s*\d{5}',
        '[ADRESSE_MASQU√âE]',
        anonymized,
        flags=re.IGNORECASE
    )
    
    # Masquer les codes postaux fran√ßais
    anonymized = re.sub(r'\b\d{5}\b', '[CODE_POSTAL_MASQU√â]', anonymized)
    
    # Masquer les villes apr√®s code postal
    anonymized = re.sub(
        r'\[CODE_POSTAL_MASQU√â\]\s+[A-Z√Ä√Ç√Ñ√â√à√ä√ã√è√é√î√ô√õ√ú√á][a-z√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ß\s\-]+',
        '[CODE_POSTAL_MASQU√â] [VILLE_MASQU√âE]',
        anonymized
    )
    
    # Masquer les dates de naissance
    anonymized = re.sub(
        r'\b(n√©|n√©e|naissance|birth)\s*(le|date)?\s*:?\s*\d{1,2}[\/\-\.]\d{1,2}[\/\-\.]\d{2,4}\b', 
        '[DATE_NAISSANCE_MASQU√âE]', 
        anonymized, 
        flags=re.IGNORECASE
    )
    
    # Masquer les dates au format JJ/MM/AAAA
    anonymized = re.sub(
        r'\b\d{1,2}[\/\-\.]\d{1,2}[\/\-\.](19|20)\d{2}\b', 
        '[DATE_MASQU√âE]', 
        anonymized
    )
    
    # Masquer l'√¢ge
    anonymized = re.sub(r'\b\d{2}\s*ans\b', '[√ÇGE_MASQU√â]', anonymized, flags=re.IGNORECASE)
    
    # Masquer les num√©ros de s√©curit√© sociale
    anonymized = re.sub(
        r'\b[1-2]\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{3}\s?\d{3}\s?\d{2}\b', 
        '[NUM√âRO_S√âCU_MASQU√â]', 
        anonymized
    )
    
    # Masquer permis de conduire
    anonymized = re.sub(
        r'\b(permis)\s*(de conduire)?\s*:?\s*[A-Z0-9]{10,}\b',
        '[PERMIS_MASQU√â]',
        anonymized,
        flags=re.IGNORECASE
    )
    
    return anonymized

# Fonction pour nettoyer le texte de tous les caract√®res non-ASCII
def clean_text_for_pdf(text):
    """
    Nettoie le texte de tous les emojis et caract√®res sp√©ciaux pour le PDF
    """
    # Supprimer tous les emojis
    emoji_pattern = re.compile("["
        u"\U0001F600-\U0001F64F"  # emoticons
        u"\U0001F300-\U0001F5FF"  # symboles & pictogrammes
        u"\U0001F680-\U0001F6FF"  # transport & symboles
        u"\U0001F1E0-\U0001F1FF"  # drapeaux
        u"\U00002500-\U00002BEF"  # symboles chinois
        u"\U00002702-\U000027B0"
        u"\U00002702-\U000027B0"
        u"\U000024C2-\U0001F251"
        u"\U0001f926-\U0001f937"
        u"\U00010000-\U0010ffff"
        u"\u2640-\u2642" 
        u"\u2600-\u2B55"
        u"\u200d"
        u"\u23cf"
        u"\u23e9"
        u"\u231a"
        u"\ufe0f"  # dingbats
        u"\u3030"
        "]+", flags=re.UNICODE)
    
    text_cleaned = emoji_pattern.sub(r'', text)
    
    # Remplacer les balises masqu√©es (qui peuvent contenir des emojis dans l'interface)
    text_cleaned = text_cleaned.replace('üîí', '')
    
    # Normaliser les caract√®res accentu√©s
    replacements = {
        '√â': 'E', '√à': 'E', '√ä': 'E', '√ã': 'E',
        '√Ä': 'A', '√Ç': 'A', '√Ñ': 'A', '√Å': 'A',
        '√ô': 'U', '√õ': 'U', '√ú': 'U', '√ö': 'U',
        '√î': 'O', '√ñ': 'O', '√ì': 'O', '√í': 'O',
        '√á': 'C',
        '√é': 'I', '√è': 'I', '√ç': 'I', '√å': 'I',
        '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e',
        '√†': 'a', '√¢': 'a', '√§': 'a', '√°': 'a',
        '√π': 'u', '√ª': 'u', '√º': 'u', '√∫': 'u',
        '√¥': 'o', '√∂': 'o', '√≥': 'o', '√≤': 'o',
        '√ß': 'c',
        '√Æ': 'i', '√Ø': 'i', '√≠': 'i', '√¨': 'i',
        ''': "'", ''': "'", '"': '"', '"': '"',
        '‚Äì': '-', '‚Äî': '-', '‚Ä¶': '...',
        '‚Ä¢': '-', '‚óè': '-', '‚óã': '-',
        '‚Ç¨': 'EUR', '¬£': 'GBP', '
def create_pdf(text, filename):
    """
    Cr√©e un PDF √† partir du texte anonymis√©
    """
    buffer = BytesIO()
    
    # Nettoyer le texte AVANT tout traitement
    text_cleaned = clean_text_for_pdf(text)
    
    # Cr√©er le document PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=2*cm,
        leftMargin=2*cm,
        topMargin=2*cm,
        bottomMargin=2*cm
    )
    
    # Styles
    styles = getSampleStyleSheet()
    style_normal = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=10,
        leading=14,
        alignment=TA_LEFT,
        spaceAfter=6,
    )
    
    # Contenu
    story = []
    
    # Ajouter un titre simple
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=14,
        spaceAfter=12,
        alignment=TA_LEFT
    )
    story.append(Paragraph("CV ANONYMISE - CONFORME RGPD", title_style))
    story.append(Spacer(1, 0.5*cm))
    
    # Ajouter le contenu du CV ligne par ligne
    lines = text_cleaned.split('\n')
    for line in lines:
        if line.strip():
            # √âchapper uniquement les caract√®res XML/HTML
            line_escaped = line.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            story.append(Paragraph(line_escaped, style_normal))
        else:
            story.append(Spacer(1, 0.2*cm))
    
    # G√©n√©rer le PDF
    try:
        doc.build(story)
    except Exception as e:
        # En cas d'erreur, cr√©er un PDF minimal
        story = [Paragraph("ERREUR: Le CV contient des caracteres non supportes.", style_normal)]
        doc.build(story)
    
    # R√©cup√©rer le contenu du buffer
    pdf_data = buffer.getvalue()
    buffer.close()
    
    return pdf_data

# Fonction pour cr√©er un export structur√© JSON
def create_structured_export(anonymized_text):
    """
    Cr√©e un export JSON structur√© pour analyse par une autre application
    """
    # Extraction des sections principales
    sections = {
        "text_complet": anonymized_text,
        "metadata": {
            "anonymise": True,
            "conformite_rgpd": True,
            "date_traitement": st.session_state.get('processing_date', 'N/A')
        },
        "sections_detectees": {}
    }
    
    # D√©tecter les sections courantes d'un CV
    section_patterns = {
        "experience": r'(EXP√âRIENCE|EXPERIENCE|PARCOURS PROFESSIONNEL)',
        "formation": r'(FORMATION|DIPL√îMES|EDUCATION)',
        "competences": r'(COMP√âTENCES|COMPETENCES|SKILLS)',
        "langues": r'(LANGUES|LANGUAGES)',
        "certifications": r'(CERTIFICATIONS|CERTIFICATS)',
        "projets": r'(PROJETS|PROJECTS)',
        "loisirs": r'(LOISIRS|CENTRES D\'INT√âR√äT|HOBBIES)'
    }
    
    for section_name, pattern in section_patterns.items():
        if re.search(pattern, anonymized_text, re.IGNORECASE):
            sections["sections_detectees"][section_name] = True
    
    return sections

# Interface Streamlit
st.title("üîí Anonymiseur de CV - Conforme RGPD")
st.markdown("---")

# Informations RGPD
with st.expander("‚ÑπÔ∏è Donn√©es anonymis√©es", expanded=True):
    st.info("""
    **Cette application masque automatiquement :**
    - ‚úÖ Noms et pr√©noms
    - ‚úÖ Adresses email
    - ‚úÖ Num√©ros de t√©l√©phone
    - ‚úÖ Adresses postales compl√®tes
    - ‚úÖ Codes postaux et villes
    - ‚úÖ Dates de naissance
    - ‚úÖ √Çges
    - ‚úÖ Num√©ros de s√©curit√© sociale
    - ‚úÖ Permis de conduire
    
    **S√©curit√© :**
    - üîí Aucun CV n'est stock√©
    - üîí Traitement en m√©moire uniquement
    - üîí Aucune conservation apr√®s la session
    """)

# Colonnes pour l'interface
col1, col2 = st.columns([1, 1])

with col1:
    st.header("üì§ CV Original")
    
    # Section pour saisir manuellement le nom et pr√©nom
    with st.expander("‚úçÔ∏è Nom et pr√©nom √† masquer (optionnel)", expanded=False):
        st.info("üí° Pour une anonymisation pr√©cise, indiquez le nom et pr√©nom du candidat")
        
        col_name1, col_name2 = st.columns(2)
        
        with col_name1:
            custom_firstname = st.text_input(
                "Pr√©nom",
                placeholder="ex: Jean",
                help="Le pr√©nom sera masqu√© partout dans le CV"
            )
        
        with col_name2:
            custom_lastname = st.text_input(
                "Nom",
                placeholder="ex: DUPONT",
                help="Le nom sera masqu√© partout dans le CV"
            )
        
        if custom_firstname or custom_lastname:
            st.success(f"‚úÖ Masquage manuel activ√© : {custom_firstname or '[pr√©nom]'} {custom_lastname or '[nom]'}")
    
    # Upload de fichier
    uploaded_file = st.file_uploader(
        "Choisissez un fichier CV",
        type=['pdf', 'docx', 'txt'],
        help="Formats accept√©s : PDF, DOCX, TXT"
    )
    
    cv_text = None
    
    if uploaded_file:
        try:
            with st.spinner("üìñ Lecture du fichier..."):
                if uploaded_file.type == "application/pdf":
                    cv_text = extract_text_from_pdf(uploaded_file)
                elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                    cv_text = extract_text_from_docx(uploaded_file)
                elif uploaded_file.type == "text/plain":
                    cv_text = uploaded_file.read().decode('utf-8')
                
                if cv_text:
                    st.success("‚úÖ Fichier lu avec succ√®s")
                    
                    # Afficher le texte original
                    st.text_area(
                        "Contenu original",
                        cv_text,
                        height=400,
                        disabled=True
                    )
        except Exception as e:
            st.error(f"Erreur lors de la lecture du fichier : {str(e)}")

with col2:
    st.header("üîê CV Anonymis√©")
    
    if cv_text:
        # Anonymisation
        with st.spinner("üîí Anonymisation en cours..."):
            anonymized_cv = anonymize_cv(cv_text, custom_firstname, custom_lastname)
            # Stocker la date de traitement
            import datetime
            st.session_state['processing_date'] = datetime.datetime.now().isoformat()
        
        st.success("‚úÖ Anonymisation termin√©e")
        
        # Afficher les √©l√©ments masqu√©s
        masking_info = []
        if custom_firstname:
            masking_info.append(f"Pr√©nom: **{custom_firstname}**")
        if custom_lastname:
            masking_info.append(f"Nom: **{custom_lastname}**")
        
        if masking_info:
            st.info("üéØ Masquage manuel: " + " | ".join(masking_info))
        
        # Champ pour personnaliser le nom du fichier
        output_filename = st.text_input(
            "üìù Nom du fichier de sortie",
            value="cv_anonymise",
            help="Entrez le nom souhait√© (sans extension)",
            max_chars=50
        )
        
        # Afficher le texte anonymis√©
        st.text_area(
            "Contenu anonymis√© (conforme RGPD)",
            anonymized_cv,
            height=400,
            disabled=True
        )
        
        # Boutons de t√©l√©chargement
        st.subheader("üíæ T√©l√©chargement")
        
        col_dl1, col_dl2, col_dl3, col_dl4 = st.columns(4)
        
        with col_dl1:
            # Export PDF (PRIORITAIRE pour votre appli d'analyse)
            pdf_data = create_pdf(anonymized_cv, output_filename)
            
            st.download_button(
                label="üìï PDF (recommand√©)",
                data=pdf_data,
                file_name=f"{output_filename}.pdf",
                mime="application/pdf",
                use_container_width=True,
                help="Format PDF pour votre application d'analyse",
                type="primary"
            )
        
        with col_dl2:
            # Export texte
            st.download_button(
                label="üìÑ Texte (.txt)",
                data=anonymized_cv,
                file_name=f"{output_filename}.txt",
                mime="text/plain",
                use_container_width=True,
                help="Format texte simple"
            )
        
        with col_dl3:
            # Export JSON structur√©
            structured_data = create_structured_export(anonymized_cv)
            json_data = json.dumps(structured_data, ensure_ascii=False, indent=2)
            
            st.download_button(
                label="üìä JSON",
                data=json_data,
                file_name=f"{output_filename}.json",
                mime="application/json",
                use_container_width=True,
                help="Format JSON pour analyse automatique"
            )
        
        with col_dl4:
            # Export CSV (lignes du CV)
            csv_data = anonymized_cv.replace('\n', '|||')
            
            st.download_button(
                label="üìã CSV",
                data=csv_data,
                file_name=f"{output_filename}.csv",
                mime="text/csv",
                use_container_width=True,
                help="Format CSV (une ligne)"
            )
        
        # Statistiques d'anonymisation
        st.markdown("---")
        st.subheader("üìä Statistiques d'anonymisation")
        
        col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)
        
        noms_masked = anonymized_cv.count('[NOM_MASQU√â]') + anonymized_cv.count('[PR√âNOM_MASQU√â]')
        emails_masked = anonymized_cv.count('[EMAIL_MASQU√â]')
        phones_masked = anonymized_cv.count('[T√âL√âPHONE_MASQU√â]')
        addresses_masked = anonymized_cv.count('[ADRESSE_MASQU√âE]')
        
        with col_stat1:
            st.metric("Noms/Pr√©noms", noms_masked)
        with col_stat2:
            st.metric("Emails", emails_masked)
        with col_stat3:
            st.metric("T√©l√©phones", phones_masked)
        with col_stat4:
            st.metric("Adresses", addresses_masked)
        
        # Aper√ßu du JSON
        with st.expander("üëÅÔ∏è Aper√ßu du format JSON structur√©"):
            st.json(structured_data)
            st.caption("Ce format est optimis√© pour √™tre lu par une application d'analyse automatique")
    else:
        st.info("üëà Uploadez un CV pour commencer l'anonymisation")

# Footer
st.markdown("---")
st.caption("üîê Conforme RGPD - Aucune donn√©e conserv√©e apr√®s votre session")
: 'USD',
    }
    
    for old, new in replacements.items():
        text_cleaned = text_cleaned.replace(old, new)
    
    # Forcer l'encodage ASCII - supprimer tout ce qui ne passe pas
    text_cleaned = text_cleaned.encode('ascii', 'ignore').decode('ascii')
    
    return text_cleaned

# Fonction pour cr√©er un PDF du CV anonymis√©
def create_pdf(text, filename):
    """
    Cr√©e un PDF √† partir du texte anonymis√©
    """
    buffer = BytesIO()
    
    # Nettoyer le texte des caract√®res sp√©ciaux et emojis
    # Remplacer les emojis et caract√®res non-ASCII probl√©matiques
    text_cleaned = text
    # Supprimer les emojis courants
    emoji_pattern = re.compile("["
        u"\U0001F600-\U0001F64F"  # emoticons
        u"\U0001F300-\U0001F5FF"  # symboles & pictogrammes
        u"\U0001F680-\U0001F6FF"  # transport & symboles de carte
        u"\U0001F1E0-\U0001F1FF"  # drapeaux
        u"\U00002702-\U000027B0"
        u"\U000024C2-\U0001F251"
        "]+", flags=re.UNICODE)
    text_cleaned = emoji_pattern.sub(r'', text_cleaned)
    
    # Remplacer les caract√®res accentu√©s probl√©matiques
    replacements = {
        '√â': 'E', '√à': 'E', '√ä': 'E', '√ã': 'E',
        '√Ä': 'A', '√Ç': 'A', '√Ñ': 'A',
        '√ô': 'U', '√õ': 'U', '√ú': 'U',
        '√î': 'O', '√ñ': 'O',
        '√á': 'C',
        '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e',
        '√†': 'a', '√¢': 'a', '√§': 'a',
        '√π': 'u', '√ª': 'u', '√º': 'u',
        '√¥': 'o', '√∂': 'o',
        '√ß': 'c',
        '√Æ': 'i', '√Ø': 'i',
        ''': "'", ''': "'", '"': '"', '"': '"',
        '‚Äì': '-', '‚Äî': '-',
    }
    
    for old, new in replacements.items():
        text_cleaned = text_cleaned.replace(old, new)
    
    # Cr√©er le document PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=2*cm,
        leftMargin=2*cm,
        topMargin=2*cm,
        bottomMargin=2*cm
    )
    
    # Styles
    styles = getSampleStyleSheet()
    style_normal = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=10,
        leading=14,
        alignment=TA_LEFT,
        spaceAfter=6,
    )
    
    # Contenu
    story = []
    
    # Ajouter un titre simple sans emoji
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=14,
        textColor='#333333',
        spaceAfter=12,
        alignment=TA_LEFT
    )
    story.append(Paragraph("CV ANONYMISE - CONFORME RGPD", title_style))
    story.append(Spacer(1, 0.5*cm))
    
    # Ajouter le contenu du CV ligne par ligne
    lines = text_cleaned.split('\n')
    for line in lines:
        if line.strip():
            # √âchapper les caract√®res sp√©ciaux pour reportlab
            line_escaped = line.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            # Supprimer tout caract√®re non-ASCII restant
            line_escaped = line_escaped.encode('ascii', 'ignore').decode('ascii')
            if line_escaped.strip():  # Ne pas ajouter de lignes vides
                story.append(Paragraph(line_escaped, style_normal))
        else:
            story.append(Spacer(1, 0.2*cm))
    
    # G√©n√©rer le PDF
    doc.build(story)
    
    # R√©cup√©rer le contenu du buffer
    pdf_data = buffer.getvalue()
    buffer.close()
    
    return pdf_data

# Fonction pour cr√©er un export structur√© JSON
def create_structured_export(anonymized_text):
    """
    Cr√©e un export JSON structur√© pour analyse par une autre application
    """
    # Extraction des sections principales
    sections = {
        "text_complet": anonymized_text,
        "metadata": {
            "anonymise": True,
            "conformite_rgpd": True,
            "date_traitement": st.session_state.get('processing_date', 'N/A')
        },
        "sections_detectees": {}
    }
    
    # D√©tecter les sections courantes d'un CV
    section_patterns = {
        "experience": r'(EXP√âRIENCE|EXPERIENCE|PARCOURS PROFESSIONNEL)',
        "formation": r'(FORMATION|DIPL√îMES|EDUCATION)',
        "competences": r'(COMP√âTENCES|COMPETENCES|SKILLS)',
        "langues": r'(LANGUES|LANGUAGES)',
        "certifications": r'(CERTIFICATIONS|CERTIFICATS)',
        "projets": r'(PROJETS|PROJECTS)',
        "loisirs": r'(LOISIRS|CENTRES D\'INT√âR√äT|HOBBIES)'
    }
    
    for section_name, pattern in section_patterns.items():
        if re.search(pattern, anonymized_text, re.IGNORECASE):
            sections["sections_detectees"][section_name] = True
    
    return sections

# Interface Streamlit
st.title("üîí Anonymiseur de CV - Conforme RGPD")
st.markdown("---")

# Informations RGPD
with st.expander("‚ÑπÔ∏è Donn√©es anonymis√©es", expanded=True):
    st.info("""
    **Cette application masque automatiquement :**
    - ‚úÖ Noms et pr√©noms
    - ‚úÖ Adresses email
    - ‚úÖ Num√©ros de t√©l√©phone
    - ‚úÖ Adresses postales compl√®tes
    - ‚úÖ Codes postaux et villes
    - ‚úÖ Dates de naissance
    - ‚úÖ √Çges
    - ‚úÖ Num√©ros de s√©curit√© sociale
    - ‚úÖ Permis de conduire
    
    **S√©curit√© :**
    - üîí Aucun CV n'est stock√©
    - üîí Traitement en m√©moire uniquement
    - üîí Aucune conservation apr√®s la session
    """)

# Colonnes pour l'interface
col1, col2 = st.columns([1, 1])

with col1:
    st.header("üì§ CV Original")
    
    # Section pour saisir manuellement le nom et pr√©nom
    with st.expander("‚úçÔ∏è Nom et pr√©nom √† masquer (optionnel)", expanded=False):
        st.info("üí° Pour une anonymisation pr√©cise, indiquez le nom et pr√©nom du candidat")
        
        col_name1, col_name2 = st.columns(2)
        
        with col_name1:
            custom_firstname = st.text_input(
                "Pr√©nom",
                placeholder="ex: Jean",
                help="Le pr√©nom sera masqu√© partout dans le CV"
            )
        
        with col_name2:
            custom_lastname = st.text_input(
                "Nom",
                placeholder="ex: DUPONT",
                help="Le nom sera masqu√© partout dans le CV"
            )
        
        if custom_firstname or custom_lastname:
            st.success(f"‚úÖ Masquage manuel activ√© : {custom_firstname or '[pr√©nom]'} {custom_lastname or '[nom]'}")
    
    # Upload de fichier
    uploaded_file = st.file_uploader(
        "Choisissez un fichier CV",
        type=['pdf', 'docx', 'txt'],
        help="Formats accept√©s : PDF, DOCX, TXT"
    )
    
    cv_text = None
    
    if uploaded_file:
        try:
            with st.spinner("üìñ Lecture du fichier..."):
                if uploaded_file.type == "application/pdf":
                    cv_text = extract_text_from_pdf(uploaded_file)
                elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                    cv_text = extract_text_from_docx(uploaded_file)
                elif uploaded_file.type == "text/plain":
                    cv_text = uploaded_file.read().decode('utf-8')
                
                if cv_text:
                    st.success("‚úÖ Fichier lu avec succ√®s")
                    
                    # Afficher le texte original
                    st.text_area(
                        "Contenu original",
                        cv_text,
                        height=400,
                        disabled=True
                    )
        except Exception as e:
            st.error(f"Erreur lors de la lecture du fichier : {str(e)}")

with col2:
    st.header("üîê CV Anonymis√©")
    
    if cv_text:
        # Anonymisation
        with st.spinner("üîí Anonymisation en cours..."):
            anonymized_cv = anonymize_cv(cv_text, custom_firstname, custom_lastname)
            # Stocker la date de traitement
            import datetime
            st.session_state['processing_date'] = datetime.datetime.now().isoformat()
        
        st.success("‚úÖ Anonymisation termin√©e")
        
        # Afficher les √©l√©ments masqu√©s
        masking_info = []
        if custom_firstname:
            masking_info.append(f"Pr√©nom: **{custom_firstname}**")
        if custom_lastname:
            masking_info.append(f"Nom: **{custom_lastname}**")
        
        if masking_info:
            st.info("üéØ Masquage manuel: " + " | ".join(masking_info))
        
        # Champ pour personnaliser le nom du fichier
        output_filename = st.text_input(
            "üìù Nom du fichier de sortie",
            value="cv_anonymise",
            help="Entrez le nom souhait√© (sans extension)",
            max_chars=50
        )
        
        # Afficher le texte anonymis√©
        st.text_area(
            "Contenu anonymis√© (conforme RGPD)",
            anonymized_cv,
            height=400,
            disabled=True
        )
        
        # Boutons de t√©l√©chargement
        st.subheader("üíæ T√©l√©chargement")
        
        col_dl1, col_dl2, col_dl3, col_dl4 = st.columns(4)
        
        with col_dl1:
            # Export PDF (PRIORITAIRE pour votre appli d'analyse)
            pdf_data = create_pdf(anonymized_cv, output_filename)
            
            st.download_button(
                label="üìï PDF (recommand√©)",
                data=pdf_data,
                file_name=f"{output_filename}.pdf",
                mime="application/pdf",
                use_container_width=True,
                help="Format PDF pour votre application d'analyse",
                type="primary"
            )
        
        with col_dl2:
            # Export texte
            st.download_button(
                label="üìÑ Texte (.txt)",
                data=anonymized_cv,
                file_name=f"{output_filename}.txt",
                mime="text/plain",
                use_container_width=True,
                help="Format texte simple"
            )
        
        with col_dl3:
            # Export JSON structur√©
            structured_data = create_structured_export(anonymized_cv)
            json_data = json.dumps(structured_data, ensure_ascii=False, indent=2)
            
            st.download_button(
                label="üìä JSON",
                data=json_data,
                file_name=f"{output_filename}.json",
                mime="application/json",
                use_container_width=True,
                help="Format JSON pour analyse automatique"
            )
        
        with col_dl4:
            # Export CSV (lignes du CV)
            csv_data = anonymized_cv.replace('\n', '|||')
            
            st.download_button(
                label="üìã CSV",
                data=csv_data,
                file_name=f"{output_filename}.csv",
                mime="text/csv",
                use_container_width=True,
                help="Format CSV (une ligne)"
            )
        
        # Statistiques d'anonymisation
        st.markdown("---")
        st.subheader("üìä Statistiques d'anonymisation")
        
        col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)
        
        noms_masked = anonymized_cv.count('[NOM_MASQU√â]') + anonymized_cv.count('[PR√âNOM_MASQU√â]')
        emails_masked = anonymized_cv.count('[EMAIL_MASQU√â]')
        phones_masked = anonymized_cv.count('[T√âL√âPHONE_MASQU√â]')
        addresses_masked = anonymized_cv.count('[ADRESSE_MASQU√âE]')
        
        with col_stat1:
            st.metric("Noms/Pr√©noms", noms_masked)
        with col_stat2:
            st.metric("Emails", emails_masked)
        with col_stat3:
            st.metric("T√©l√©phones", phones_masked)
        with col_stat4:
            st.metric("Adresses", addresses_masked)
        
        # Aper√ßu du JSON
        with st.expander("üëÅÔ∏è Aper√ßu du format JSON structur√©"):
            st.json(structured_data)
            st.caption("Ce format est optimis√© pour √™tre lu par une application d'analyse automatique")
    else:
        st.info("üëà Uploadez un CV pour commencer l'anonymisation")

# Footer
st.markdown("---")
st.caption("üîê Conforme RGPD - Aucune donn√©e conserv√©e apr√®s votre session")
